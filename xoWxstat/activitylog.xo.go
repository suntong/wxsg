// Package xoWxstat contains the types for schema ''.
package xoWxstat

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/xo/xoutil"
)

// ActivityLog represents a row from 'activity_log'.
type ActivityLog struct {
	ActivityLogID  int           `json:"activity_log_id"`  // activity_log_id
	UserID         int           `json:"user_id"`          // user_id
	GroupID        int           `json:"group_id"`         // group_id
	ActivityTypeID int           `json:"activity_type_id"` // activity_type_id
	ActivityDate   xoutil.SqTime `json:"activity_date"`    // activity_date
	Stat           int           `json:"stat"`             // stat

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ActivityLog exists in the database.
func (al *ActivityLog) Exists() bool {
	return al._exists
}

// Deleted provides information if the ActivityLog has been deleted from the database.
func (al *ActivityLog) Deleted() bool {
	return al._deleted
}

// Insert inserts the ActivityLog to the database.
func (al *ActivityLog) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if al._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO activity_log (` +
		`user_id, group_id, activity_type_id, activity_date, stat` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, al.UserID, al.GroupID, al.ActivityTypeID, al.ActivityDate, al.Stat)
	res, err := db.Exec(sqlstr, al.UserID, al.GroupID, al.ActivityTypeID, al.ActivityDate, al.Stat)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	al.ActivityLogID = int(id)
	al._exists = true

	return nil
}

// Update updates the ActivityLog in the database.
func (al *ActivityLog) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !al._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if al._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE activity_log SET ` +
		`user_id = ?, group_id = ?, activity_type_id = ?, activity_date = ?, stat = ?` +
		` WHERE activity_log_id = ?`

	// run query
	XOLog(sqlstr, al.UserID, al.GroupID, al.ActivityTypeID, al.ActivityDate, al.Stat, al.ActivityLogID)
	_, err = db.Exec(sqlstr, al.UserID, al.GroupID, al.ActivityTypeID, al.ActivityDate, al.Stat, al.ActivityLogID)
	return err
}

// Save saves the ActivityLog to the database.
func (al *ActivityLog) Save(db XODB) error {
	if al.Exists() {
		return al.Update(db)
	}

	return al.Insert(db)
}

// Delete deletes the ActivityLog from the database.
func (al *ActivityLog) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !al._exists {
		return nil
	}

	// if deleted, bail
	if al._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM activity_log WHERE activity_log_id = ?`

	// run query
	XOLog(sqlstr, al.ActivityLogID)
	_, err = db.Exec(sqlstr, al.ActivityLogID)
	if err != nil {
		return err
	}

	// set deleted
	al._deleted = true

	return nil
}

// ActivityLogByActivityLogID retrieves a row from 'activity_log' as a ActivityLog.
//
// Generated from index 'activity_log_activity_log_id_pkey'.
func ActivityLogByActivityLogID(db XODB, activityLogID int) (*ActivityLog, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`activity_log_id, user_id, group_id, activity_type_id, activity_date, stat ` +
		`FROM activity_log ` +
		`WHERE activity_log_id = ?`

	// run query
	XOLog(sqlstr, activityLogID)
	al := ActivityLog{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, activityLogID).Scan(&al.ActivityLogID, &al.UserID, &al.GroupID, &al.ActivityTypeID, &al.ActivityDate, &al.Stat)
	if err != nil {
		return nil, err
	}

	return &al, nil
}
