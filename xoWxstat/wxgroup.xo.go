// Package xoWxstat contains the types for schema ''.
package xoWxstat

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// WxGroup represents a row from 'wx_group'.
type WxGroup struct {
	GroupID      int            `json:"group_id"`      // group_id
	Name         string         `json:"name"`          // name
	Comment      sql.NullString `json:"comment"`       // comment
	ActivePeriod int            `json:"active_period"` // active_period
	QuietPeriod  int            `json:"quiet_period"`  // quiet_period
	ActiveNum    int            `json:"active_num"`    // active_num
	QuietNum     int            `json:"quiet_num"`     // quiet_num

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WxGroup exists in the database.
func (wg *WxGroup) Exists() bool {
	return wg._exists
}

// Deleted provides information if the WxGroup has been deleted from the database.
func (wg *WxGroup) Deleted() bool {
	return wg._deleted
}

// Insert inserts the WxGroup to the database.
func (wg *WxGroup) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wg._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO wx_group (` +
		`name, comment, active_period, quiet_period, active_num, quiet_num` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wg.Name, wg.Comment, wg.ActivePeriod, wg.QuietPeriod, wg.ActiveNum, wg.QuietNum)
	res, err := db.Exec(sqlstr, wg.Name, wg.Comment, wg.ActivePeriod, wg.QuietPeriod, wg.ActiveNum, wg.QuietNum)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	wg.GroupID = int(id)
	wg._exists = true

	return nil
}

// Update updates the WxGroup in the database.
func (wg *WxGroup) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wg._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wg._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE wx_group SET ` +
		`name = ?, comment = ?, active_period = ?, quiet_period = ?, active_num = ?, quiet_num = ?` +
		` WHERE group_id = ?`

	// run query
	XOLog(sqlstr, wg.Name, wg.Comment, wg.ActivePeriod, wg.QuietPeriod, wg.ActiveNum, wg.QuietNum, wg.GroupID)
	_, err = db.Exec(sqlstr, wg.Name, wg.Comment, wg.ActivePeriod, wg.QuietPeriod, wg.ActiveNum, wg.QuietNum, wg.GroupID)
	return err
}

// Save saves the WxGroup to the database.
func (wg *WxGroup) Save(db XODB) error {
	if wg.Exists() {
		return wg.Update(db)
	}

	return wg.Insert(db)
}

// Delete deletes the WxGroup from the database.
func (wg *WxGroup) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wg._exists {
		return nil
	}

	// if deleted, bail
	if wg._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM wx_group WHERE group_id = ?`

	// run query
	XOLog(sqlstr, wg.GroupID)
	_, err = db.Exec(sqlstr, wg.GroupID)
	if err != nil {
		return err
	}

	// set deleted
	wg._deleted = true

	return nil
}

// WxGroupsByName retrieves a row from 'wx_group' as a WxGroup.
//
// Generated from index 'idx_wx_group_name'.
func WxGroupsByName(db XODB, name string) ([]*WxGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`group_id, name, comment, active_period, quiet_period, active_num, quiet_num ` +
		`FROM wx_group ` +
		`WHERE name = ?`

	// run query
	XOLog(sqlstr, name)
	q, err := db.Query(sqlstr, name)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*WxGroup{}
	for q.Next() {
		wg := WxGroup{
			_exists: true,
		}

		// scan
		err = q.Scan(&wg.GroupID, &wg.Name, &wg.Comment, &wg.ActivePeriod, &wg.QuietPeriod, &wg.ActiveNum, &wg.QuietNum)
		if err != nil {
			return nil, err
		}

		res = append(res, &wg)
	}

	return res, nil
}

// WxGroupByGroupID retrieves a row from 'wx_group' as a WxGroup.
//
// Generated from index 'wx_group_group_id_pkey'.
func WxGroupByGroupID(db XODB, groupID int) (*WxGroup, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`group_id, name, comment, active_period, quiet_period, active_num, quiet_num ` +
		`FROM wx_group ` +
		`WHERE group_id = ?`

	// run query
	XOLog(sqlstr, groupID)
	wg := WxGroup{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, groupID).Scan(&wg.GroupID, &wg.Name, &wg.Comment, &wg.ActivePeriod, &wg.QuietPeriod, &wg.ActiveNum, &wg.QuietNum)
	if err != nil {
		return nil, err
	}

	return &wg, nil
}
