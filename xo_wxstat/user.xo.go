package xo_wxstat

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// User represents a row from 'user'.
type User struct {
	UserID int    `json:"user_id"` // user_id
	Name   string `json:"name"`    // name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted returns true when the User has been marked for deletion from
// the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(ctx context.Context, db DB) error {
	switch {
	case u._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case u._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO user (` +
		`user_id, name` +
		`) VALUES (` +
		`$1, $2` +
		`)`
	// run
	logf(sqlstr, u.UserID, u.Name)
	if _, err := db.ExecContext(ctx, sqlstr, u.UserID, u.Name); err != nil {
		return logerror(err)
	}
	// set exists
	u._exists = true
	return nil
}

// Update updates a User in the database.
func (u *User) Update(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case u._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE user SET ` +
		`name = $1 ` +
		`WHERE user_id = $2`
	// run
	logf(sqlstr, u.Name, u.UserID)
	if _, err := db.ExecContext(ctx, sqlstr, u.Name, u.UserID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the User to the database.
func (u *User) Save(ctx context.Context, db DB) error {
	if u.Exists() {
		return u.Update(ctx, db)
	}
	return u.Insert(ctx, db)
}

// Upsert performs an upsert for User.
func (u *User) Upsert(ctx context.Context, db DB) error {
	switch {
	case u._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO user (` +
		`user_id, name` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (user_id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name `
	// run
	logf(sqlstr, u.UserID, u.Name)
	if _, err := db.ExecContext(ctx, sqlstr, u.UserID, u.Name); err != nil {
		return err
	}
	// set exists
	u._exists = true
	return nil
}

// Delete deletes the User from the database.
func (u *User) Delete(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return nil
	case u._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM user ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, u.UserID)
	if _, err := db.ExecContext(ctx, sqlstr, u.UserID); err != nil {
		return logerror(err)
	}
	// set deleted
	u._deleted = true
	return nil
}

// UserByName retrieves a row from 'user' as a User.
//
// Generated from index 'idx_user_name'.
func UserByName(ctx context.Context, db DB, name string) ([]*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`user_id, name ` +
		`FROM user ` +
		`WHERE name = $1`
	// run
	logf(sqlstr, name)
	rows, err := db.QueryContext(ctx, sqlstr, name)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*User
	for rows.Next() {
		u := User{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&u.UserID, &u.Name); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &u)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// UserByUserID retrieves a row from 'user' as a User.
//
// Generated from index 'user_user_id_pkey'.
func UserByUserID(ctx context.Context, db DB, userID int) (*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`user_id, name ` +
		`FROM user ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, userID)
	u := User{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, userID).Scan(&u.UserID, &u.Name); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}
