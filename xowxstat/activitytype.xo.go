// Package xoWxstat contains the types for schema ''.
package xoWxstat

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// ActivityType represents a row from 'activity_type'.
type ActivityType struct {
	ActivityTypeID int            `json:"activity_type_id"` // activity_type_id
	Name           string         `json:"name"`             // name
	Scale          int            `json:"scale"`            // scale
	Comment        sql.NullString `json:"comment"`          // comment

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ActivityType exists in the database.
func (at *ActivityType) Exists() bool {
	return at._exists
}

// Deleted provides information if the ActivityType has been deleted from the database.
func (at *ActivityType) Deleted() bool {
	return at._deleted
}

// Insert inserts the ActivityType to the database.
func (at *ActivityType) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if at._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO activity_type (` +
		`name, scale, comment` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, at.Name, at.Scale, at.Comment)
	res, err := db.Exec(sqlstr, at.Name, at.Scale, at.Comment)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	at.ActivityTypeID = int(id)
	at._exists = true

	return nil
}

// Update updates the ActivityType in the database.
func (at *ActivityType) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !at._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if at._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE activity_type SET ` +
		`name = ?, scale = ?, comment = ?` +
		` WHERE activity_type_id = ?`

	// run query
	XOLog(sqlstr, at.Name, at.Scale, at.Comment, at.ActivityTypeID)
	_, err = db.Exec(sqlstr, at.Name, at.Scale, at.Comment, at.ActivityTypeID)
	return err
}

// Save saves the ActivityType to the database.
func (at *ActivityType) Save(db XODB) error {
	if at.Exists() {
		return at.Update(db)
	}

	return at.Insert(db)
}

// Delete deletes the ActivityType from the database.
func (at *ActivityType) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !at._exists {
		return nil
	}

	// if deleted, bail
	if at._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM activity_type WHERE activity_type_id = ?`

	// run query
	XOLog(sqlstr, at.ActivityTypeID)
	_, err = db.Exec(sqlstr, at.ActivityTypeID)
	if err != nil {
		return err
	}

	// set deleted
	at._deleted = true

	return nil
}

// ActivityTypeByActivityTypeID retrieves a row from 'activity_type' as a ActivityType.
//
// Generated from index 'activity_type_activity_type_id_pkey'.
func ActivityTypeByActivityTypeID(db XODB, activityTypeID int) (*ActivityType, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`activity_type_id, name, scale, comment ` +
		`FROM activity_type ` +
		`WHERE activity_type_id = ?`

	// run query
	XOLog(sqlstr, activityTypeID)
	at := ActivityType{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, activityTypeID).Scan(&at.ActivityTypeID, &at.Name, &at.Scale, &at.Comment)
	if err != nil {
		return nil, err
	}

	return &at, nil
}
